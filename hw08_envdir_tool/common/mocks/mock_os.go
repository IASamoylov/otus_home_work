// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IASamoylov/otus_home_work/hw08_envdir_tool/common (interfaces: OSFunctions)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	fs "io/fs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOSFunctions is a mock of OSFunctions interface.
type MockOSFunctions struct {
	ctrl     *gomock.Controller
	recorder *MockOSFunctionsMockRecorder
}

// MockOSFunctionsMockRecorder is the mock recorder for MockOSFunctions.
type MockOSFunctionsMockRecorder struct {
	mock *MockOSFunctions
}

// NewMockOSFunctions creates a new mock instance.
func NewMockOSFunctions(ctrl *gomock.Controller) *MockOSFunctions {
	mock := &MockOSFunctions{ctrl: ctrl}
	mock.recorder = &MockOSFunctionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSFunctions) EXPECT() *MockOSFunctionsMockRecorder {
	return m.recorder
}

// Environ mocks base method.
func (m *MockOSFunctions) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockOSFunctionsMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockOSFunctions)(nil).Environ))
}

// Open mocks base method.
func (m *MockOSFunctions) Open(arg0 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOSFunctionsMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOSFunctions)(nil).Open), arg0)
}

// ReadDir mocks base method.
func (m *MockOSFunctions) ReadDir(arg0 string) ([]fs.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0)
	ret0, _ := ret[0].([]fs.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockOSFunctionsMockRecorder) ReadDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockOSFunctions)(nil).ReadDir), arg0)
}

// Setenv mocks base method.
func (m *MockOSFunctions) Setenv(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setenv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setenv indicates an expected call of Setenv.
func (mr *MockOSFunctionsMockRecorder) Setenv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setenv", reflect.TypeOf((*MockOSFunctions)(nil).Setenv), arg0, arg1)
}

// Unsetenv mocks base method.
func (m *MockOSFunctions) Unsetenv(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsetenv", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsetenv indicates an expected call of Unsetenv.
func (mr *MockOSFunctionsMockRecorder) Unsetenv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsetenv", reflect.TypeOf((*MockOSFunctions)(nil).Unsetenv), arg0)
}
